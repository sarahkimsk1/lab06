# Question 1
def repeat_apply_tasks(elem, n_repeat, *tasks):
    """
    >>> repeat_apply_tasks('Marina', 2, \
        lambda text: text + '!', lambda text: text * 2)
    'Marina!Marina!!Marina!Marina!!'
    >>> repeat_apply_tasks(10, 3, \
        lambda num: num + 1, lambda num: num + 2, lambda num: num + 3)
    28
    >>> repeat_apply_tasks([], 4, \
        lambda lst: lst + [0], lambda lst: lst + [1])
    [0, 1, 0, 1, 0, 1, 0, 1]
    """

    # YOUR CODE GOES HERE #
    for i in range(n_repeat):
        for x in tasks:
           elem = x(elem)
    return elem


# Question 2
def find_best_tasks(value, target, **tasks):
    """
    >>> find_best_tasks(100, 200, task_1=lambda x: x**2, task_2=lambda x: x, \
        task_3=lambda x: x*2, task_4=lambda x: x**3)
    ['task_1', 'task_3', 'task_4']
    >>> find_best_tasks(50, -100)
    []
    >>> find_best_tasks(50, -100, A=lambda x: x//2, \
        B=lambda x: x-150, C=lambda x: x-200)
    ['B', 'C']
    """
    # YOUR CODE GOES HERE #
    out = []
    [out.append(k) for k,v in tasks.items() if (v(value) <= target and target < value)
     or (v(value) >= target and target > value)]
    return out


# Question 3
def translate_player_text(text):
    """
    >>> translate_player_text("mi%io% is im#ost!r")
    'minion is imposter'
    >>> translate_player_text("TH@%KS")
    'THanKS'
    >>> translate_player_text("@!%#")
    'aenp'
    """
    # YOUR CODE GOES HERE #
    if len(text) == 0:
        return ''
    temp = text[0]
    if temp in ['@', '!', '%', '#']:
        if temp == '@':
            temp = 'a'
        if temp == '!':
            temp = 'e'
        if temp == '%':
            temp = 'n'
        if temp == '#':
            temp = 'p'
    return temp + translate_player_text(text[1:])

# Question 4
def count_performance(crew, imposter):
    """
    >>> count_performance("WWQLL", "LQQWW")
    [4, 3]
    >>> count_performance("%", "X")
    [0, 0]
    >>> count_performance("WLWL", "LRXW")
    [3, 3]
    """
    # YOUR CODE GOES HERE #
    if len(crew) == 0 and len(imposter) == 0:
        return ''
    if crew[0] == 'a':
        return 1+ count_performance(crew[1:], imposter)
    else:
        return count_performance(crew[1:], imposter)



# Question 5
def hidden_message(msg, threshold):
    """
    >>> hidden_message('abc', 3)
    True
    >>> hidden_message('a', -1)
    True
    >>> hidden_message('I am not the imposter', 10)
    False
    >>> hidden_message('I am not the imposter', 100)
    True
    """
    # YOUR CODE GOES HERE #
    if len(msg) == 1:
        return True
    splt = [msg[i:i + threshold] for i in range(0, len(msg), threshold)]
    for x in splt:
        for i in x:
            count = ord(i)
            count -= ord(i)
            print(count)
            if count <= threshold:
                return True
            else:
                return False

# go through each number in i and subract it from the one before



# Question 6
def separate_nums(num, char, step):
    """
    >>> separate_nums(100000, '-', 2)
    '10-00-00'
    >>> separate_nums(-1957820, '..', 4)
    '-195..7820'
    >>> separate_nums(-2020, ' ', 2)
    '-20 20'
    >>> separate_nums(19, '_', 2)
    '19'
    """
    # YOUR CODE GOES HERE #
    s = str(num)
    r = s[:2]
    a = [(r[i: i + step]) for i in range(0, len(r), step)]
    return char.join(a)
